int Solution::maxProfit(const vector<int> &A) {
    int n = A.size();
    if (n <= 1) {
        return 0;
    }

    // Initialize the dp array to store the maximum profit at each day
    vector<vector<int>> dp(3, vector<int>(n, 0));

    for (int trans = 1; trans <= 2; ++trans) {
        int maxDiff = -A[0];
        for (int day = 1; day < n; ++day) {
            dp[trans][day] = max(dp[trans][day - 1], A[day] + maxDiff);
            maxDiff = max(maxDiff, dp[trans - 1][day] - A[day]);
        }
    }

    return dp[2][n - 1];
}
