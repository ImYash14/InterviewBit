int Solution::numDecodings(string A) {
    int n = A.size();
    if (n == 0 || A[0] == '0') {
        return 0;
    }

    const int MOD = 1000000007;

    // dp[i] represents the number of ways to decode the string A[0..i-1]
    vector<int> dp(n + 1, 0);
    dp[0] = 1;
    dp[1] = (A[0] == '0') ? 0 : 1;

    for (int i = 2; i <= n; ++i) {
        // Check if the current digit is not '0'
        if (A[i - 1] != '0') {
            dp[i] = dp[i - 1];
        }

        // Check if the last two digits form a valid letter (between '10' and '26')
        int twoDigit = (A[i - 2] - '0') * 10 + (A[i - 1] - '0');
        if (twoDigit >= 10 && twoDigit <= 26) {
            dp[i] = (dp[i] + dp[i - 2]) % MOD;
        }
    }

    return dp[n];
}

