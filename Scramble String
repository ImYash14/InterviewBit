unordered_map<string, bool> memo;
int Solution::isScramble(const string A, const string B) {
    string key = A + "_" + B;
    if (memo.find(key) != memo.end()) {
        return memo[key];
    }

    int n = A.length();
    if (n != B.length()) {
        return memo[key] = 0;
    }

    if (A == B) {
        return memo[key] = 1;
    }

    // Check if the characters in A and B are the same
    int freq[26] = {0};
    for (int i = 0; i < n; ++i) {
        freq[A[i] - 'a']++;
        freq[B[i] - 'a']--;
    }

    for (int i = 0; i < 26; ++i) {
        if (freq[i] != 0) {
            return memo[key] = 0;
        }
    }

    // Try all possible splits and recursive calls
    for (int i = 1; i < n; ++i) {
        if ((isScramble(A.substr(0, i), B.substr(0, i)) &&
             isScramble(A.substr(i), B.substr(i))) ||
            (isScramble(A.substr(0, i), B.substr(n - i)) &&
             isScramble(A.substr(i), B.substr(0, n - i)))) {
            return memo[key] = 1;
        }
    }

    return memo[key] = 0;
}


